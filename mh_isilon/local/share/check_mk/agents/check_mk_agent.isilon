#!/bin/bash
# Check_MK Agent for EMC Isilon
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Lars Michelsen <lm@mathias-kettner.de>
#         Florian Heigl <florian.heigl@gmail.com>
#           (Added sections: df mount mem netctr ipmitool)

# NOTE: This agent has beed adapted from the Check_MK linux agent.
#       The most sections are commented out at the moment because
#       they have not been ported yet. We will try to adapt most
#       sections to print out the same output as the linux agent so
#       that the current checks can be used.

#
# EMC Isilon adaptions:
#
# This is modified FreeBSD agent to run from ifs filesystem (which
# is mounted "noexec") with access restricted to the homedir of a
# special user.
#
# How to:
#
# - Prepare an Isilon user, e.g. "check_mk" in "LOCAL:System" provider
# - Homedir "/ifs/home/check_mk"
# - assign role "AuditAdmin"
# - sudoers: check_mk ALL=(ALL) NOPASSWD:/usr/bin/isi_for_array *
#
# - prepare directory structure:
#    /ifs/home/check_mk/etc
#    /ifs/home/check_mk/var/run/check_mk/cache
#    /ifs/home/check_mk/local
#    /ifs/home/check_mk/plugins
#
# - if you want to query agent by SSH-Login:
#    - additional dirs:
#    /ifs/home/check_mk/.ssh
#    /ifs/home/check_mk/bin
#    - deploy SSH public key for login and put agent into ~/bin/check_mk_agent
#    - WATO rule "datasource_programs"
#      ("Individual program call instead of agent access"):
#      /usr/bin/ssh -o "StrictHostKeyChecking no" check_mk@<IP> "/usr/local/bin/bash /ifs/home/check_mk/bin/check_mk_agent"
#
# - Configure only one host object: the Isilon cluster address. Nodes are
#   automagically integrated.
#
# - You do not want to query agent more often than every 5 minutes, isi says.
#
# - You want to deploy plugins, Tom says.
#   - plugins/1800/mh_isilon
#   - plugins/300/isilon_pstat_nfs (not only for NFS)
#
#
#                        \m/ >_< \m/
#
#  EMC Isilon adaptions: Tom Tretbar <thomas.tretbar@managedhosting.de>

#

# This might be a good source as description of sysctl output:
# http://people.freebsd.org/~hmp/utilities/satbl/_sysctl.html

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR="/ifs/home/check_mk"
export MK_CONFDIR="/ifs/home/check_mk/etc"
export MK_TMPDIR="/ifs/home/check_mk/var/run/check_mk"


# Make sure, locally installed binaries are found
PATH=$PATH:/usr/local/bin:/usr/local/sbin

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local


# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec </dev/null 2>/dev/null
fi

# Runs a command asynchronous by use of a cache file
function run_cached() {
    if [ "$1" = -s ] ; then local section="echo '<<<$2>>>' ; " ; shift ; fi
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$section$@"

    if [ ! -d $MK_TMPDIR/cache ]; then mkdir -p $MK_TMPDIR/cache ; fi
    CACHEFILE="$MK_TMPDIR/cache/$NAME.cache"

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    local NOW=$(date +%s)
    if [ -e "$CACHEFILE.new" ] ; then
        local CF_ATIME=$(stat -f "%a" "$CACHEFILE.new")
        if [ $((NOW - CF_ATIME)) -ge $((MAXAGE * 2)) ] ; then
            return
        fi
    fi

    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ] ; then
        local MTIME=$(stat -f "%m" "$CACHEFILE")
        if [ $((NOW - MTIME)) -le $MAXAGE ] ; then local USE_CACHEFILE=1 ; fi
        # Output the file in any case, even if it is
        # outdated. The new file will not yet be available
        cat "$CACHEFILE"
    fi

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" -a ! -e "$CACHEFILE.new" ] ; then
        echo "$CMDLINE" |  daemon /usr/local/bin/bash $CMDLINE -o noclobber > $CACHEFILE.new && mv $CACHEFILE.new $CACHEFILE || rm -f $CACHEFILE $CACHEFILE.new &
    fi
}

echo '<<<check_mk>>>'
echo Version: 1.4.0p15
echo AgentOS: isilon



osver="$(uname -r)"
is_jailed="$(sysctl -n security.jail.jailed)"


echo '<<<df>>>'
( sudo /usr/bin/isi_for_array -s df -kTP -t ufs ) \
  | egrep -v '(Filesystem|devfs|procfs|fdescfs|basejail|uzip|ufp|ipmi)' \
  | sed 's/^.*-\([0-9]*\)\:\(.*\)$/Node-\1\2/g' \
  | awk '{ print $2" "$3" "$4" "$5" "$6" "$7" "$1":"$8 }'


# Produce compatible load/cpu output to linux agent. Not so easy here. Especially on Isilon
echo '<<<isi_cpu>>>'
if [ ! -e /ifs/home/check_mk/bin/isi_cpu ]
then
  cat >/ifs/home/check_mk/bin/isi_cpu <<- EOF
sysctl -n vm.loadavg | tr -d '{}' | xargs echo -n
echo -n " "
top -b -n 1 | sed -n 's/^\([0-9]*\) processes: \([0-9]*\) .*$/\2\/\1/p' | xargs echo -n
echo -n " "
sysctl -n kern.lastpid | xargs echo -n
echo -n " "
sysctl -n hw.ncpu
EOF
fi

( sudo /usr/bin/isi_for_array -s /usr/local/bin/bash /ifs/home/check_mk/bin/isi_cpu ) | sed 's/^.*-\([0-9]*\)\:\(.*\)$/Node-\1\2/g'


# Calculate the uptime in seconds since epoch compatible to /proc/uptime in linux
echo '<<<isi_uptime>>>'
if [ ! -e /ifs/home/check_mk/bin/isi_uptime ]
then
  cat >/ifs/home/check_mk/bin/isi_uptime <<- "EOF"
up_seconds=$(($(date +%s)-$(sysctl -n kern.boottime  | sed -n 's/^.* \([0-9]*\),.*$/\1/p')))
idle_seconds=$(ps axw | sed -n '/\[idle\]/ { s/^.*[^0-9]\([0-9]*\)\:.*/\1/p;}')
echo "$up_seconds $idle_seconds"
EOF
fi

( sudo /usr/bin/isi_for_array -s /usr/local/bin/bash /ifs/home/check_mk/bin/isi_uptime ) | sed 's/^.*-\([0-9]*\)\:\(.*\)$/Node-\1\2/g'

# memory. thx to https://raw.githubusercontent.com/ocochard/myscripts/master/FreeBSD/freebsd-memory.sh for pointing this out
echo '<<<isi_mem>>>'
if [ ! -e /ifs/home/check_mk/bin/isi_mem ]
then
  cat >/ifs/home/check_mk/bin/isi_uptime <<- "EOF"
mem_total=$(sysctl -n hw.physmem)
sysctl_pagesize=$(sysctl -n hw.pagesize)
mem_inactive=$(($(sysctl -n vm.stats.vm.v_inactive_count) * $sysctl_pagesize))
mem_cache=$(($(sysctl -n vm.stats.vm.v_cache_count) * $sysctl_pagesize))
mem_free=$(($(sysctl -n vm.stats.vm.v_free_count) * $sysctl_pagesize))
mem_avail=$(($mem_inactive + $mem_cache + $mem_free))
echo $mem_total $mem_avail
EOF
fi

( sudo /usr/bin/isi_for_array -s /usr/local/bin/bash /ifs/home/check_mk/bin/isi_mem ) | sed 's/^.*-\([0-9]*\)\:\(.*\)$/Node-\1\2/g'


# Performancecounter Kernel
#echo "<<<kernel>>>"
#date +%s
#forks=`sysctl -n vm.stats.vm.v_forks`
#vforks=`sysctl -n vm.stats.vm.v_vforks`
#rforks=`sysctl -n vm.stats.vm.v_rforks`
#kthreads=`sysctl -n vm.stats.vm.v_kthreads`
#echo "cpu" `sysctl -n kern.cp_time | awk ' { print $1" "$2" "$3" "$5" "$4 } '`
#echo "ctxt" `sysctl -n vm.stats.sys.v_swtch`
#echo "processes" `expr $forks + $vforks + $rforks + $kthreads`


if which ntpq > /dev/null 2>&1 ; then
   echo '<<<ntp>>>'
   # remote heading, make first column space separated
   ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
fi


# Local checks
echo '<<<local>>>'
if cd $LOCALDIR ; then
    for skript in $(ls) ; do
        if [ -f "$skript" -a -x "$skript" ] ; then

            INTERPRETER=$(sed -n '1s/^#!\(.*\)$/\1/p' $skript)
            [ -z ${INTERPRETER} ] && INTERPRETER=/usr/local/bin/bash
            ${INTERPRETER} ${skript}

            #/usr/local/bin/bash ./$skript
        fi
    done
    # Call some plugins only every X'th minute
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached local_${skript//\//\\} ${skript%/*} "$skript"
        fi
    done
fi

# Plugins
if cd $PLUGINSDIR; then
    for skript in $(ls) ; do
        if [ -f "$skript" -a -x "$skript" ] ; then

            INTERPRETER=$(sed -n '1s/^#!\(.*\)$/\1/p' $skript)
            [ -z ${INTERPRETER} ] && INTERPRETER=/usr/local/bin/bash
            ${INTERPRETER} ${skript}

            #/usr/local/bin/bash ./$skript
        fi
    done
    # Call some plugins only every X'th minute
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached plugins_${skript//\//\\} ${skript%/*} "$skript"
        fi
    done
fi


exit

